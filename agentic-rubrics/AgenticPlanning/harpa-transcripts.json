[
  {
    "url": "https://www.youtube.com/watch?v=YTjYXii4WzI",
    "title": "Get started with Docker and Tailscale",
    "views": null,
    "publishedTimeAgo": null,
    "transcript": "[00:00] Hello Internet, it's Alex from Tailscale here. Now back in the spring we released a deep dive on container networking with Docker and Tailscale and we covered every corner of that topic in excruciating detail. But in today's Docker quick start video I wanted to give you just the basics, the things that you need to know to get off the ground as quickly as possible. If you'd like to dive deeper on any of the topics we cover today, the full-length video and deep dive blog post from the spring will be linked down below. Tailscale is the\n[00:29] easiest way to connect your devices and services together wherever they are and I want to help you today get your containers directly onto your tailnet, our name for a Tailscale network of devices. That's so that they become available to you anywhere regardless of the network topology between you and them. Take your existing containers and throw up a Tailscale sidecar proxy for each and boom you can now access these services via Tailscale from anywhere.\n[00:58] So I have here a completely fresh install of Ubuntu server. It doesn't have Docker, it doesn't have Tailscale, so we're going to need to set up a couple of things just to make our lives easier and actually be able to run some applications. So first thing we're going to do is install Docker. I like to do this using the get.docker.com script. So if we look down here there is a line under step 1 called download the script. So I'm going to paste this into my terminal on my Ubuntu VM. Then you're just going to very quickly just verify\n[01:27] this looks about right. You can see that this pretty much matches, well exactly matches, what we've seen on get.docker.com. So that's good. I'm now going to do a sudo sh install docker.sh. It's going to ask me for my sudo password and now it's going to go ahead and install Docker. It only takes a minute or so and then once that's done we want to just modify the user group that Zafod, our Linux user, is\n[01:52] part of with Zafod and Docker. No, I always get those the wrong way around. Always, every time. Okay, user mod and then Docker Zafod. I'm then going to need to log out and then in again so that the Linux grouping system picks up those changes. I can now do a docker run --rm hello world just to verify that the Docker engine is installed all correctly. Excellent. Let's move on to the next step which is creating our first tailscale container. Note that we still don't have\n[02:22] tailscale installed on the host and that's by design for right now anyway. I mean you could install tailscale on the host and have it in the container as well if you'd like to. But let's not over complicate things right now. Let's just create a Docker Compose YAML file. I'm going to use Vim for this but you could just as well use Nano or any other text editor that you would prefer. Now we're going to copy and paste some code. This is all linked in a repo down in the description with some sample code for you and you can see here that I've got a\n[02:51] couple of containers. First of all we've got a tailscale container. These few lines here are the official tailscale Docker image that we publish. We're going to need to make some very minor tweaks just to put this all together. You can see here I've got an auth key. This is essentially like a password and this is what allows this container to connect to my tailnet. Well your tailnet I suppose. And where do we get this from? Well we can go to the tailscale admin dashboard. You'lls will look like this. You'll probably log\n[03:21] in and land on the machines page. Along the top menu up here look under settings and then go to keys on the left hand side. Click on generate auth key and call this whatever you like. I'm going to call mine banana. I'm going to leave these all alone except for reusable just because we're doing a demo right now. What you choose to do with this it's up to you. Generate key. Copy that to my clipboard and then I'm going to modify this line here with a C and then a dollar sign to\n[03:50] do a change until end of line with them. And then I'm just going to write that change with a colon W. I need to make one more change just down here. I've just spotted a small mistake. So under service this must match the name of the service that you want to proxy through the tailscale container. So in my case you can see that this is the service name up here tailscale auth key one. This\n[04:16] must match this name here must match the name of the service that you want to proxy. Okay so what this is going to do is going to make Nginx which is a web server available on your tail net on port 80. Also note the host name I've set here of banana. We just went to watch the Minions movie so bananas are on the brain I suppose. And what I want this to do is put a Nginx container on my tail net with the host name of banana. Now we should be good to go here so let's do\n[04:46] a write quit and then do a docker compose up -d and it's going to pull all of these containers in the background. I say all two containers in the background and we should now be able to go to our admin console under the machines page and see that we have banana. There we go. So I'm going to do HTTP colon banana and voila we've just added a banana to our tail net. So now the question becomes\n[05:12] what do we do when we want to have a second or a third or a fourth application? Well let's dig into that. So let's deploy a second application I'm just going to deploy this alongside the Nginx container we just deployed. Remember there are code snippets in the description down below for you. Now you need to group all of the volumes for your various containers together at the bottom of a docker compose file. I'm going to need three different volumes for this specific deployment so I've got one for the tail scale container to\n[05:40] persist the state of the container itself then I've got two here for the sterling PDF container. Now sterling PDF by the way is an awesome self-hosted PDF Swiss Army knife toolkit thing. If you've ever had to use Adobe Acrobat for anything like converting a PDF, merging them, signing them, sterling PDF can do it and you can host this as a self-hosted app on your tail net. Now I'm just going to copy and paste the relevant part into my docker compose file. So let's just put\n[06:09] in these lines here and just walk you through what's going on. Now if I scroll up a little bit you can see first of all we've got the sterling TS container. This is the tail scale container this is the one that actually does the heavy lifting and connects to your tail net. Next up we've got the image name for tail scale slash tail scale and the container name is sterling - TS. Now my host name is PDF as you remember from above banana is the name we gave to the Nginx container.\n[06:37] PDF is the name this node will appear with on my tail net. Next up we've got a few environment variables things like the TS oauth client secret. We generate this in much the same way as we would do the auth key. So we go to our machines page over on tailscale.com settings go to oauth clients and then generate oauth clients. I'm just going to call this one PDF the name's not important and then under devices all we need to give it is the right scope. This is particularly\n[07:06] useful if you have auditors in your life because they love things to be scoped tokens and then we need to give it a tag of container. Once we've done that click on generate client copy the client secret and put that into your configuration file with a CT question mark change to a question mark in Vim at least. If you don't have a tag set up in your ACLs already you'll need to first\n[07:33] go over to access controls and add this line here tag colon container with an auto group of admin or whatever groupings you feel most comfortable with. There is quite a lot of nuance between the auth key and the oauth client. Check out the long form Docker video there's chapter markers in that big video if you want the full details of the differences between those two authentication methods. For right now we should be good to go in terms of connecting this to our tail net\n[08:02] we need to just add another line here of TS extra args this one advertises the tag container so this is how tailscale knows which tag to request to authenticate as. We then need to make sure that our state is persisted in varlib tailscale so there must be a Docker volume created or defined for this value and then these three or four lines here dev net ton are all to do with how tailscale mounts the network device and finally we've got the actual\n[08:31] sterling PDF application itself. Remember the only super important thing is to make sure that this name here matches the name of the service further up in the file so this key here must match the service key that you define under the network mode setting in the application itself. Now also note we don't have any ports exposed whatsoever I mean typically you might do something like this in a Docker compose file which exposes port 8080 onto the Linux host\n[08:59] itself we don't want to do that we want to keep everything encapsulated with inside the container and put onto our tail net. From there we should be good to go so let's give this a whirl shall we let's do Docker compose up - D. It's going to pull down the sterling PDF container it's 700 megabytes so we'll take a minute or two. Once that's done we can do Docker compose logs - F and just\n[09:26] see what's going on scroll back up I don't see any dangerous looking stuff awesome cool so if I go back now to my machines page hopefully we will see PDF absolutely there it is. Note that it's available through not only a fully qualified domain name of velociraptor-noodlefish and we can check that in the DNS tab over here as to what my tail net name should be but if I now\n[09:50] go to HTTP colon slash slash PDF - port 80 because it's listing on port 80 remember we've now added sterling PDF to our tail net alongside remember that banana is still running on that same host look you can actually see in the background because we've got the logs running you can actually see that it's doing the rep requests in real time how fun is that same with sterling PDF as\n[10:16] well so this is a fantastic app I can't recommend sterling PDF enough to you but there you go that's that's really the general principle of how you connect multiple containers on the same host using an OAuth client as well as an auth key using Docker. Now for those of you that don't want to type PDF colon 8080 if you hate port numbers as much as I do you just want to have a TLS certificate and have this all taken care of for you using Let's Encrypt. Well I'm going to\n[10:44] show you how to do that and the first step is to go into your tailscale admin console under DNS we need to go all the way down to the bottom and click on enable HTTPS certificates. Next we want to go into our Linux host and see where it's storing app data so in our Docker compose file I defined a directory for our tailscale container for sterling PDF for something called TS underscore serve underscore config this is a JSON file again there'll be a link in the\n[11:13] description down below for the configuration for something called tailscale serve this is a feature built into tailscale that lets you automatically get TLS certificates for any service hosted on your tailnet without having to worry about things like reverse proxies and API keys and owning a DNS name all that kind of stuff super simple super easy. Now I'm going to uncomment this line here of TS serve config and go into the config directory which we created a moment ago and then I'm just going to create\n[11:43] sterling.json in here I'm going to paste in these few lines of code and notice that we have some magic variables in here this means you don't need to hard code anything at all except for the port number of the service that you want to proxy so in our case sterling PDF runs on 8080 if your application runs on a different port you'll want to change this to match the port of the service that you want to proxy that's the only thing you've got to change. Now once\n[12:11] you've made those changes the easiest way to get the domain that's been exposed you know just double check what's going on is to use this docker exec command here so we'll do docker exec -it and then the name of the sterling PDF tailscale container not the PDF container itself remember the sidecar tailscale container and then we'll just do tailscale serve status and you can see here that we're proxying localhost inside the container or from port 80 on\n[12:39] to HTTPS PDF velociraptor - noodlefish now this will take a few seconds because underneath we're actually going out to let's encrypt generating the certificate and then installing it in the local system that can take anywhere from 5 to 30 seconds depending on how busy the let's encrypt API is and you see in real time whilst I was talking we've just generated the HTTPS certificate for this service on this domain name and you can see that we now\n[13:07] have a secure connection backed by a let's encrypt certificate. Note that you can do the same thing with tailscale funnel which is basically tailscale serve but exposes it to the internet there are some extra steps you'll need to follow in the ACLs and I'll link to the documentation for tailscale funnel down below. So there we have it that is the getting started guide for tailscale and docker don't forget down in the description down below there are a whole bunch of links and resources available for you the github repo with code\n[13:35] snippets as well as the original blog post and of course the original YouTube video from the spring as well. Don't forget to let us know how you're using tailscale in the comments down below or indeed ask us any questions we didn't cover in today's video we're going to be doing some Q&amp;A's and live streams and that kind of thing over the coming weeks and months so do let us know in the comments down below. Thank you so much for watching and until next time I've been Alex from tailscale"
  }
]